<?php

{% import "document/macro/Document.php.functions.twig" as func %}

namespace {{ base }}Document;

use \Doctrine\Common\Collections\ArrayCollection;
use Graviton\I18nBundle\Document\TranslatableDocumentInterface;

{% set translatableFields = [] %}

/**
 * {{ base }}Document\{{ document }}
 *
 * @license  http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link     http://swisscom.ch
 */
class {{ document }} implements TranslatableDocumentInterface
{

    /**

    public function getContactRef()
    {
    $ref = new Ref();
    $ref->setRef('/contact/dude/'.$this->getContact()->getId());

    return $ref;
    //return new PersonContact();

    }

    public function setContactRef($contact)
    {
    $this->setContact(new PersonContact());
    }
     */

    /**
     * @var MongoId $id
     */
    protected $id;

    /**
    * @var Date $deletedDate
    */
    protected $deletedDate;

{% for field in fields %}
    /**
{% if 'Graviton' in field.type %}
    * @var \{{ field.type }} ${{ field.fieldName }}
{% else %}
    * @var {{ field.type }} ${{ field.fieldName }}
{% endif %}
    */
{% if field.type == 'array' %}
    protected ${{ field.fieldName }} = array();
{% else %}
    protected ${{ field.fieldName }};
{% endif %}

{% endfor %}
    /**
     * constructor
     *
     * @return self
     */
    public function __construct()
    {
{% for field in fields %}
{% if '[]' in field.type %}
        $this->{{ field.fieldName }} = new ArrayCollection();
{% endif %}
{% endfor %}
    }

    /**
     * Get id
     *
     * @return string $id
     */
    public function getId()
    {
        return $this->id;
    }

    public function getDeleteddate()
    {
        return $this->deletedDate;
    }

{% for field in fields %}

    {% if field.translatable is defined and field.translatable == true %}
        {% set translatableFields = translatableFields|merge([field.fieldName]) %}
    {% endif %}

{# normal setter and getter #}
{{ func.getter(field) }}
{{ func.setter(field) }}

{% if ('[]' in field.type or field.type == 'array') %}
{# setter and getter for collections #}
{{ func.adder(field) }}
{{ func.remover(field) }}
{% endif %}

{% if field.isClassRef == true %}
{# setter and getter for references #}
{{ func.getterRef(field) }}
{{ func.setterRef(field) }}
{% endif %}

{% endfor %}

    /**
    * return translatable field names
    *
    * @return string[]
    */
    public function getTranslatableFields()
    {
        return array('{{ translatableFields|join('\',\'') }}');
    }

}
